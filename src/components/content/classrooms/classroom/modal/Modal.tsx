import React from "react";import { Button, Modal } from "antd";import { useDispatch, useSelector } from "react-redux";import {  freeClassroomAC,  occupyClassroomAC,  setDisabledButton,  setModalVisible,} from "../../../../../store/actions";import { fetchClassroomsTC } from "../../../../../store/effects";import { Classroom } from "../../../../../store/types";import { useMutation } from "@apollo/client";import { FREE_CLASSROOM, OCCUPY_CLASSROOM } from "../../../../../api/mutations";import { userTypeColors, userTypesUA } from "../../../../../lib/constants";import Occupied from "../overview/occupied/Occupied";import Free from "../overview/free/Free";import { withRouter } from "react-router-dom";const ModalClassroom = (props: any) => {  let classroomName =    props.match.params.name === undefined ? 1 : props.match.params.name;  let dispatch = useDispatch();  // @ts-ignore  let userId = useSelector((state) => state.classroomsReducer.userIdValue);  // @ts-ignore  let disabledButton = useSelector((state) => state.classroomsReducer.disabledButton);  // @ts-ignore  let visible = useSelector((state) => state.classroomsReducer.modalVisible);  // @ts-ignore  let classroom = useSelector((state) => state.classroomsReducer.classrooms  ).find((cl: Classroom) => cl.name === String(classroomName));  // @ts-ignore  let untilValue = useSelector((state) => state.classroomsReducer.untilValue);  const isOccupied = classroom.occupied != null ? true : false;  const untilDate = new Date(isOccupied ? classroom.occupied.until : "0");  const untilTime = untilDate.getHours() + ":" + untilDate.getMinutes();  const userType = isOccupied ? classroom.occupied.user.type : "";  // @ts-ignore  let userTypeUA = userTypesUA[userType];  // @ts-ignore  let initialsColor = userTypeColors[userType];  let hideModal = () => {    dispatch(setModalVisible(false));    dispatch(setDisabledButton(true));  };  const [occupyClassroom] = useMutation(OCCUPY_CLASSROOM);  const [freeClassroom] = useMutation(FREE_CLASSROOM);  let footerButtonOk = isOccupied ? (    <>      <Button        key="submit"        type="primary"        onClick={() => {          freeClassroom({            variables: {              input: {                classroomName: classroom.name,              },            },          }).then((r) => {            dispatch(fetchClassroomsTC);            dispatch(freeClassroomAC(classroom.name));            dispatch(setDisabledButton(true));          });        }}      >        Передати аудиторію      </Button>      <Button        key="submit"        type="primary"        danger        onClick={() => {          freeClassroom({            variables: {              input: {                classroomName: classroom.name,              },            },          }).then((r) => {            dispatch(fetchClassroomsTC);            dispatch(freeClassroomAC(classroom.name));            dispatch(setDisabledButton(true));            dispatch(setModalVisible(false));          });        }}      >        Звільнити аудиторію      </Button>    </>  ) : (    <Button      disabled={disabledButton}      key="submit"      type="primary"      onClick={() => {        occupyClassroom({          variables: {            input: {              classroomName: String(classroom.name),              userId: userId,              until: new Date(new Date().getTime() + untilValue),            },          },        }).then((r) => {          let occupiedData = r.data.occupyClassroom.classroom.occupied;          dispatch(occupyClassroomAC(occupiedData, classroom.name));          dispatch(setDisabledButton(true));          dispatch(setModalVisible(false));        });      }}    >      Записати в аудиторію    </Button>  );  return (    <Modal      title={"Аудиторія №" + classroom.name}      visible={visible}      onOk={hideModal}      onCancel={hideModal}      footer={[        <Button key="back" onClick={hideModal}>          Закрити        </Button>,        footerButtonOk,      ]}      width={1000}    >      {isOccupied ? (        <Occupied classroom={classroom} />      ) : (        <Free disabledButton={disabledButton} classroom={classroom} />      )}    </Modal>  );};export default withRouter(ModalClassroom);